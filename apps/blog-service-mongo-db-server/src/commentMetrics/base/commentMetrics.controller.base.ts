/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommentMetricsService } from "../commentMetrics.service";
import { CommentMetricsCreateInput } from "./CommentMetricsCreateInput";
import { CommentMetrics } from "./CommentMetrics";
import { CommentMetricsFindManyArgs } from "./CommentMetricsFindManyArgs";
import { CommentMetricsWhereUniqueInput } from "./CommentMetricsWhereUniqueInput";
import { CommentMetricsUpdateInput } from "./CommentMetricsUpdateInput";

export class CommentMetricsControllerBase {
  constructor(protected readonly service: CommentMetricsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommentMetrics })
  async createCommentMetrics(
    @common.Body() data: CommentMetricsCreateInput
  ): Promise<CommentMetrics> {
    return await this.service.createCommentMetrics({
      data: data,
      select: {
        commentId: true,
        createdAt: true,
        id: true,
        likes: true,
        spamReports: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommentMetrics] })
  @ApiNestedQuery(CommentMetricsFindManyArgs)
  async commentMetricsItems(
    @common.Req() request: Request
  ): Promise<CommentMetrics[]> {
    const args = plainToClass(CommentMetricsFindManyArgs, request.query);
    return this.service.commentMetricsItems({
      ...args,
      select: {
        commentId: true,
        createdAt: true,
        id: true,
        likes: true,
        spamReports: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommentMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commentMetrics(
    @common.Param() params: CommentMetricsWhereUniqueInput
  ): Promise<CommentMetrics | null> {
    const result = await this.service.commentMetrics({
      where: params,
      select: {
        commentId: true,
        createdAt: true,
        id: true,
        likes: true,
        spamReports: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommentMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommentMetrics(
    @common.Param() params: CommentMetricsWhereUniqueInput,
    @common.Body() data: CommentMetricsUpdateInput
  ): Promise<CommentMetrics | null> {
    try {
      return await this.service.updateCommentMetrics({
        where: params,
        data: data,
        select: {
          commentId: true,
          createdAt: true,
          id: true,
          likes: true,
          spamReports: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommentMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommentMetrics(
    @common.Param() params: CommentMetricsWhereUniqueInput
  ): Promise<CommentMetrics | null> {
    try {
      return await this.service.deleteCommentMetrics({
        where: params,
        select: {
          commentId: true,
          createdAt: true,
          id: true,
          likes: true,
          spamReports: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
