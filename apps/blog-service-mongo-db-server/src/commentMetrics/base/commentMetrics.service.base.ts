/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CommentMetrics as PrismaCommentMetrics } from "@prisma/client";

export class CommentMetricsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommentMetricsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commentMetrics.count(args);
  }

  async commentMetricsItems<T extends Prisma.CommentMetricsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentMetricsFindManyArgs>
  ): Promise<PrismaCommentMetrics[]> {
    return this.prisma.commentMetrics.findMany<Prisma.CommentMetricsFindManyArgs>(
      args
    );
  }
  async commentMetrics<T extends Prisma.CommentMetricsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentMetricsFindUniqueArgs>
  ): Promise<PrismaCommentMetrics | null> {
    return this.prisma.commentMetrics.findUnique(args);
  }
  async createCommentMetrics<T extends Prisma.CommentMetricsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentMetricsCreateArgs>
  ): Promise<PrismaCommentMetrics> {
    return this.prisma.commentMetrics.create<T>(args);
  }
  async updateCommentMetrics<T extends Prisma.CommentMetricsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentMetricsUpdateArgs>
  ): Promise<PrismaCommentMetrics> {
    return this.prisma.commentMetrics.update<T>(args);
  }
  async deleteCommentMetrics<T extends Prisma.CommentMetricsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentMetricsDeleteArgs>
  ): Promise<PrismaCommentMetrics> {
    return this.prisma.commentMetrics.delete(args);
  }
}
