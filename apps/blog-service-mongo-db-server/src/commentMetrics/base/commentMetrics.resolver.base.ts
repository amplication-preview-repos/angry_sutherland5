/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommentMetrics } from "./CommentMetrics";
import { CommentMetricsCountArgs } from "./CommentMetricsCountArgs";
import { CommentMetricsFindManyArgs } from "./CommentMetricsFindManyArgs";
import { CommentMetricsFindUniqueArgs } from "./CommentMetricsFindUniqueArgs";
import { CreateCommentMetricsArgs } from "./CreateCommentMetricsArgs";
import { UpdateCommentMetricsArgs } from "./UpdateCommentMetricsArgs";
import { DeleteCommentMetricsArgs } from "./DeleteCommentMetricsArgs";
import { CommentMetricsService } from "../commentMetrics.service";
@graphql.Resolver(() => CommentMetrics)
export class CommentMetricsResolverBase {
  constructor(protected readonly service: CommentMetricsService) {}

  async _commentMetricsItemsMeta(
    @graphql.Args() args: CommentMetricsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommentMetrics])
  async commentMetricsItems(
    @graphql.Args() args: CommentMetricsFindManyArgs
  ): Promise<CommentMetrics[]> {
    return this.service.commentMetricsItems(args);
  }

  @graphql.Query(() => CommentMetrics, { nullable: true })
  async commentMetrics(
    @graphql.Args() args: CommentMetricsFindUniqueArgs
  ): Promise<CommentMetrics | null> {
    const result = await this.service.commentMetrics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommentMetrics)
  async createCommentMetrics(
    @graphql.Args() args: CreateCommentMetricsArgs
  ): Promise<CommentMetrics> {
    return await this.service.createCommentMetrics({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CommentMetrics)
  async updateCommentMetrics(
    @graphql.Args() args: UpdateCommentMetricsArgs
  ): Promise<CommentMetrics | null> {
    try {
      return await this.service.updateCommentMetrics({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommentMetrics)
  async deleteCommentMetrics(
    @graphql.Args() args: DeleteCommentMetricsArgs
  ): Promise<CommentMetrics | null> {
    try {
      return await this.service.deleteCommentMetrics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
