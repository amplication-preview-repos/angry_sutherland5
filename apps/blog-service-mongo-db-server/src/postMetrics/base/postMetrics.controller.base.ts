/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostMetricsService } from "../postMetrics.service";
import { PostMetricsCreateInput } from "./PostMetricsCreateInput";
import { PostMetrics } from "./PostMetrics";
import { PostMetricsFindManyArgs } from "./PostMetricsFindManyArgs";
import { PostMetricsWhereUniqueInput } from "./PostMetricsWhereUniqueInput";
import { PostMetricsUpdateInput } from "./PostMetricsUpdateInput";

export class PostMetricsControllerBase {
  constructor(protected readonly service: PostMetricsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostMetrics })
  async createPostMetrics(
    @common.Body() data: PostMetricsCreateInput
  ): Promise<PostMetrics> {
    return await this.service.createPostMetrics({
      data: data,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostMetrics] })
  @ApiNestedQuery(PostMetricsFindManyArgs)
  async postMetricsItems(
    @common.Req() request: Request
  ): Promise<PostMetrics[]> {
    const args = plainToClass(PostMetricsFindManyArgs, request.query);
    return this.service.postMetricsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postMetrics(
    @common.Param() params: PostMetricsWhereUniqueInput
  ): Promise<PostMetrics | null> {
    const result = await this.service.postMetrics({
      where: params,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostMetrics(
    @common.Param() params: PostMetricsWhereUniqueInput,
    @common.Body() data: PostMetricsUpdateInput
  ): Promise<PostMetrics | null> {
    try {
      return await this.service.updatePostMetrics({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          likes: true,
          postId: true,
          updatedAt: true,
          views: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostMetrics(
    @common.Param() params: PostMetricsWhereUniqueInput
  ): Promise<PostMetrics | null> {
    try {
      return await this.service.deletePostMetrics({
        where: params,
        select: {
          createdAt: true,
          id: true,
          likes: true,
          postId: true,
          updatedAt: true,
          views: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
