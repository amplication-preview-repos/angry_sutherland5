/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PostMetrics } from "./PostMetrics";
import { PostMetricsCountArgs } from "./PostMetricsCountArgs";
import { PostMetricsFindManyArgs } from "./PostMetricsFindManyArgs";
import { PostMetricsFindUniqueArgs } from "./PostMetricsFindUniqueArgs";
import { CreatePostMetricsArgs } from "./CreatePostMetricsArgs";
import { UpdatePostMetricsArgs } from "./UpdatePostMetricsArgs";
import { DeletePostMetricsArgs } from "./DeletePostMetricsArgs";
import { PostMetricsService } from "../postMetrics.service";
@graphql.Resolver(() => PostMetrics)
export class PostMetricsResolverBase {
  constructor(protected readonly service: PostMetricsService) {}

  async _postMetricsItemsMeta(
    @graphql.Args() args: PostMetricsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PostMetrics])
  async postMetricsItems(
    @graphql.Args() args: PostMetricsFindManyArgs
  ): Promise<PostMetrics[]> {
    return this.service.postMetricsItems(args);
  }

  @graphql.Query(() => PostMetrics, { nullable: true })
  async postMetrics(
    @graphql.Args() args: PostMetricsFindUniqueArgs
  ): Promise<PostMetrics | null> {
    const result = await this.service.postMetrics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PostMetrics)
  async createPostMetrics(
    @graphql.Args() args: CreatePostMetricsArgs
  ): Promise<PostMetrics> {
    return await this.service.createPostMetrics({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PostMetrics)
  async updatePostMetrics(
    @graphql.Args() args: UpdatePostMetricsArgs
  ): Promise<PostMetrics | null> {
    try {
      return await this.service.updatePostMetrics({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PostMetrics)
  async deletePostMetrics(
    @graphql.Args() args: DeletePostMetricsArgs
  ): Promise<PostMetrics | null> {
    try {
      return await this.service.deletePostMetrics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
